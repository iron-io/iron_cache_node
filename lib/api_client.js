// Generated by CoffeeScript 1.12.7
(function() {
  var APIClient, _, ironCore, version,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('pkginfo')(module);

  version = this.version;

  _ = require('underscore');

  ironCore = require('iron_core');

  APIClient = (function(superClass) {
    extend(APIClient, superClass);

    APIClient.prototype.AWS_US_EAST_HOST = 'cache-aws-us-east-1.iron.io';

    function APIClient(options) {
      var defaultOptions;
      defaultOptions = {
        scheme: 'https',
        host: this.AWS_US_EAST_HOST,
        port: 443,
        api_version: 1,
        user_agent: this.version()
      };
      APIClient.__super__.constructor.call(this, 'iron', 'cache', options, defaultOptions, ['project_id', 'token', 'api_version']);
    }

    APIClient.prototype.version = function() {
      return "iron_cache_node-" + version + " (" + (APIClient.__super__.version.call(this)) + ")";
    };

    APIClient.prototype.url = function() {
      return APIClient.__super__.url.call(this) + this.options.api_version.toString() + ("/projects/" + this.options.project_id + "/caches");
    };

    APIClient.prototype.headers = function() {
      return _.extend({}, APIClient.__super__.headers.call(this), {
        'Authorization': "OAuth " + this.options.token
      });
    };

    APIClient.prototype.cachesList = function(options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.getCache = function(cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("/" + cache_name, options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.deleteCache = function(cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.delete("/" + cache_name, options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    APIClient.prototype.clearCache = function(cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + cache_name + "/clear", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };
    
    APIClient.prototype.putItem = function(key, cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.put("/" + cache_name + "/items/" + key, options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

      APIClient.prototype.IncrementItem = function(key, cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.post("/" + cache_name + "/items/" +key + "/increment", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    
    APIClient.prototype.getCacheItem = function(key, cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.get("/" + cache_name + "/items/" + key, options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };

    
    APIClient.prototype.deleteItem = function(cache_name, options, cb) {
      var parseResponseBind;
      parseResponseBind = _.bind(this.parseResponse, this);
      return this.delete("/" + cache_name + "/items", options, function(error, response, body) {
        return parseResponseBind(error, response, body, cb);
      });
    };
    
    
    return APIClient;

  })(ironCore.Client);

  module.exports.APIClient = APIClient;

}).call(this);
